<%- include('./layout', { 
    pageTitle: 'Home', 
    css: `
        <style>
            .rounded-15 {
                border-radius: 15px !important;
            }
            .rounded-10 {
                border-radius: 10px !important;
            }
            .lightgrey {
                color: #B6BED2;
            }
            .border-lightgrey {
                border: 1px solid rgba(0, 0, 0, .125);
            }
            table {
                width: 100%;
            }
            table td {
                padding-bottom: 15px;
            }
            table td:nth-child(1) {
                width: 40px;
            }
            table td:nth-child(3) {
                width: 30px;
                text-align: right;
            }
        </style>
    `,
    content: `
        <div class="content">
            <div class="row">
                <div class="col-xl-4 col-md-5">

                    <!-- Wallet -->
                    <div class="card rounded-15 mb-3">
                        <div class="card-body">
                            <div class="text-center mb-3">
                                <i class="icon-wallet icon-2x text-primary-700 border-primary-700 border-2 rounded-round p-3 mb-2 mt-1"></i>
                                <h4 id="name" class="mb-0 font-weight-semibold">-</h4>
                                <!-- <a onclick="logout()" class="btn btn-light btn-outline alpha-primary border-lightgrey font-weight-semibold rounded-round mt-2 mr-1"><i class="icon-user mr-2 lightgrey"></i>Profile</a> -->
                                <button onclick="logout()"  class="btn btn-light btn-outline alpha-danger border-lightgrey btn-icon rounded-round mt-2"><i class="icon-exit lightgrey"></i></buttin>
                            </div>
                            <div class="text-center mb-1">
                                <span class="d-block lightgrey font-weight-semibold">Total Balance</span>
                                <h1 id="balance" class="mb-1 font-weight-bold text-primary-700">Rp 0,00</h1>
                                <h6 class="d-block lightgrey font-weight-semibold">IDR</h6>
                                <a href="#" data-toggle="modal" data-target="#modal_deposit" class="btn btn-light btn-outline alpha-primary border-lightgrey font-weight-bold rounded-round mt-2 mr-1"><i class="icon-arrow-up8 mr-2 text-teal-300"></i>Deposit</a>
                                <a href="#" data-toggle="modal" data-target="#modal_withdraw" class="btn btn-light btn-outline alpha-primary border-lightgrey font-weight-bold rounded-round mt-2 ml-1"><i class="icon-arrow-down8 mr-2 text-primary-300"></i>Withdraw</a>
                            </div>
                        </div>
                    </div>
                    <!-- /wallet -->
                </div>

                <div class="col-xl-8 col-md-7">

                    <!-- Transaction history -->
                    <div class="card rounded-15">
                        <div class="card-header header-elements-inline">
                            <h4 class="card-title font-weight-semibold">Transaction History</h4>
                        </div>

                        <div class="card-body">
                            <div class="d-flex justify-content: center;">
                                <table id="myTable"> 
                                    <tbody></tbody>
                                </table> 
                            </div>

                            <div id="pagination" class="mt-1 text-right"></div> 
                        </div>
                    </div>
                    
                    <!-- /Transaction history -->
                    
                </div>
            </div>
        </div>

        <!-- modal -->
        <div id="modal_deposit" class="modal fade" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content rounded-15">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">×</button>
                    </div>
                    <div class="modal-body pt-0">
                        <div class="text-center mb-3">
                            <i class="icon-wallet icon-2x text-primary-700 border-primary-700 border-2 rounded-round p-3 mb-2 mt-1"></i>
                            <span class="d-block text-muted">
                                Current Balance: 
                                <span id="balanceDeposit" class="font-weight-semibold">Rp 0,00</span>
                            </span>
                        </div>
                        <div class="text-center mb-1">
                            <span class="d-block">Enter Amount (Rp) :</span>
                            <h1 class="mb-1 font-weight-bold text-primary-700">
                                <input id="depositAmount" type="text" class="text-center border-lightgrey bd-1 rounded-10">
                            </h1>
                            <button onclick="deposit()" id="deposit" data-dismiss="modal" class="btn btn-primary bg-primary-800 font-weight-bold rounded-round mt-2 mr-1">Deposit Now</button>
                        </div>
                    </div>
                    <div class="modal-footer">
                    </div>
                </div>
            </div>
        </div>

        <div id="modal_withdraw" class="modal fade" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content rounded-15">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">×</button>
                    </div>
                    <div class="modal-body pt-0">
                        <div class="text-center mb-3">
                            <i class="icon-wallet icon-2x text-primary-700 border-primary-700 border-2 rounded-round p-3 mb-2 mt-1"></i>
                            <span class="d-block text-muted">
                                Current Balance: 
                                <span id="balanceWithdraw" class="font-weight-semibold">Rp 0,00</span>
                            </span>
                        </div>
                        <div class="text-center mb-1">
                            <span class="d-block">Enter Amount (Rp) :</span>
                            <h1 class="mb-1 font-weight-bold text-primary-700">
                                <input id="withdrawAmount" type="text" class="text-center border-lightgrey bd-1 rounded-10">
                            </h1>
                            <button onclick="withdraw()" id="withdraw" data-dismiss="modal" class="btn btn-primary bg-primary-800 font-weight-bold rounded-round mt-2 mr-1">Withdraw Now</button>
                        </div>
                    </div>
                    <div class="modal-footer">
                    </div>
                </div>
            </div>
        </div>
     `,
    js: `
        <script>
            const token = localStorage.getItem('token');

            var depositAmount = document.getElementById('depositAmount');
            depositAmount.addEventListener('keyup', function(e) {
                depositAmount.value = formatRupiah(this.value, 'Rp ');
            });
            depositAmount.addEventListener('keydown', function(event) {
                limitCharacter(event);
            });
            
            var withdrawAmount= document.getElementById('withdrawAmount');
            withdrawAmount.addEventListener('keyup', function(e) {
                withdrawAmount.value = formatRupiah(this.value, 'Rp ');
            });
            withdrawAmount.addEventListener('keydown', function(event) {
                limitCharacter(event);
            });

            function formatRupiah(bilangan, prefix) {
                function isDigitAndCommaOnly(str) {
                    return /^[0-9,]*$/.test(str);
                }
                var numberString = isDigitAndCommaOnly(bilangan) ? bilangan : bilangan.replace(/[^0-9,]/g, '');
                var floatString = numberString.replace(',', '.');
                var split = floatString.split('.');
                var float = parseFloat(split[0]);
                var decimal = split[1] || '';
                var amount = float.toLocaleString('id-ID');

                decimal = Math.round(parseFloat('0.' + decimal) * 100);
                decimal = decimal ? ','+decimal : '';
                
                var result = prefix + amount + decimal;
                if (amount === 'NaN') {
                     result = '';
                }
                return result;
            }

            function limitCharacter(event) {
                var key = event.which || event.keyCode;
                if (
                    key != 188 &&
                    key != 8 && 
                    key != 17 && key != 86 && key != 67 && 
                    (key < 48 || key > 57) 
                ) {
                    event.preventDefault();
                    return false;
                }
            }

            function formattedAmount(amount) {
                const float = parseFloat(amount);
                const formattedAmount = float.toLocaleString('id-ID', { minimumFractionDigits: 2 });
                return formattedAmount;
            }

            document.addEventListener('DOMContentLoaded', async function() {
                if (!token) {
                    window.location.href = '/login';
                }
                const walletUrl = '/api/wallet';
                const historyUrl = '/api/transactions/history';
                
                async function fetchData(url) {
                    const response = await fetch(url, {
                        headers: {
                            'Authorization': 'Bearer ' + token,
                        }
                    });
                    return response;
                }

                // wallet
                try {
                    const name = document.querySelector('#name');
                    const balance = document.querySelector('#balance');

                    const response = await fetchData(walletUrl);
                    const responseData = await response.json();

                    if (response.ok) {
                        const amount = responseData.data.total_amount;

                        name.textContent = responseData.data.name;

                        if (amount) {
                            const balanceData = formattedAmount(amount);
                            balance.textContent = 'Rp ' + balanceData;
                        }
                    } else {
                        alert(responseData.error.message);
                    }
                } catch (error) {
                    console.error('Fetch wallet error:', error.message);
                    alert('An unexpected error occurred. Please try again later.');
                }

                // transaction history
                try {
                    const response = await fetchData(historyUrl);
                    const responseData = await response.json();

                    if (response.ok) {
                        const data = responseData.data;

                        const rowsPerPage = 5;
                        let currentPage = 1;

                        function displayTable(page) {
                            const tableBody = document.querySelector("#myTable tbody");
                            const startIndex = (page - 1) * rowsPerPage;
                            const endIndex = startIndex + rowsPerPage;
                            const slicedData = data.slice(startIndex, endIndex);

                            while (tableBody.firstChild) {
                                tableBody.removeChild(tableBody.firstChild);
                            }

                            slicedData.forEach(item => {
                                const row = tableBody.insertRow();
                                const logoCell = row.insertCell(0);
                                const typeDateCell = row.insertCell(1);
                                const statusCell = row.insertCell(2);
                                const amount = formattedAmount(item.amount);

                                let type = "Deposit"

                                if (item.type === 10) {
                                    logoCell.innerHTML = '<i class="icon-arrow-up8 border-1 rounded-round p-1 text-teal-300"></i>';
                                } else if (item.type === 20) {
                                    type = "Withdraw"
                                    logoCell.innerHTML = '<i class="icon-arrow-down8 border-1 rounded-round p-1 text-primary-300"></i>';
                                }
                                
                                typeDateCell.innerHTML = '<h6 class="d-block font-weight-semibold mb-0">' + type + '</h6><span class="d-block lightgrey">' + item.date + '</span>';

                                if (item.status === 1) {
                                    statusCell.innerHTML = '<h6 class="d-block mb-0">' + amount + '</h6><span class="d-block text-success">Success</span>';
                                } else if (item.status === 2) {
                                    statusCell.innerHTML = '<h6 class="d-block mb-0">' + amount + '</h6><span class="d-block text-danger">Failed</span>';
                                }
                            });

                            updatePagination(page);
                        }

                        function updatePagination(currentPage) {
                            const pageCount = Math.ceil(data.length / rowsPerPage);
                            const paginationContainer = document.getElementById("pagination");
                            paginationContainer.innerHTML = "";

                            const prevLink = document.createElement("a");
                            prevLink.href = "#";
                            prevLink.className = "text-dark mr-2";
                            prevLink.innerHTML = '<i class="icon-arrow-left5"></i> Prev';
                            prevLink.onclick = function () {
                                if (currentPage > 1) {
                                    currentPage--;
                                    displayTable(currentPage);
                                }
                            };
                            if (pageCount > 1 && currentPage > 1) {
                                paginationContainer.appendChild(prevLink);
                                paginationContainer.appendChild(document.createTextNode(" "));
                            }

                            const nextLink = document.createElement("a");
                            nextLink.href = "#";
                            nextLink.className = "text-dark ml-2";
                            nextLink.innerHTML = 'Next <i class="icon-arrow-right5"></i>';
                            nextLink.onclick = function () {
                                if (currentPage < pageCount) {
                                    currentPage++;
                                    displayTable(currentPage);
                                }
                            };
                            if (pageCount > 1 && currentPage < pageCount) {
                                paginationContainer.appendChild(nextLink);
                                paginationContainer.appendChild(document.createTextNode(" "));
                            }
                        }

                        displayTable(currentPage);
                    } else {
                        alert(responseData.error.message);
                    }
                } catch (error) {
                    console.error('Fetch transactions history error:', error.message);
                    alert('An unexpected error occurred. Please try again later.');
                }
            });

            function formatDecimal(bilangan) {
                var numberString = bilangan.replace(/[^0-9,]/g, '');
                var floatString = numberString.replace(',', '.');
                if (floatString) {
                    var split = floatString.split('.');
                    var decimal = split[1] ? floatString : floatString+'.00';
                    decimal = parseFloat(decimal).toFixed(2);
                    return decimal;
                }
                return '';
            }

            async function deposit() {
                var depositValue = await formatDecimal(depositAmount.value);
                if (depositValue === '') {
                    alert('Please, enter the amount.');
                } else {
                    try {
                        const requestBody = {
                            amount: depositValue,
                        };

                        const response = await fetch('/api/transactions/deposit', {
                            method: 'POST',
                            headers: {
                                'Authorization': 'Bearer ' + token,
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(requestBody)
                        });
    
                        const responseData = await response.json();
    
                        if (response.ok) {
                            depositAmount.value = '';
                            window.location.href = '/home';
                            alert(responseData.message);
                        } else {
                            alert(responseData.error.message);
                        }
                    } catch (error) {
                        console.error('Deposit error:', error.message);
                        alert('An unexpected error occurred. Please try again later.');
                    }
                }
            }

            async function withdraw() {
                var withdrawValue = formatDecimal(withdrawAmount.value);
                if (withdrawValue === '') {
                    alert('Please, enter the amount.');
                }

                const requestBody = {
                    amount: withdrawValue,
                };

                try {
                    const response = await fetch('/api/transactions/withdraw', {
                        method: 'POST',
                        headers: {
                            'Authorization': 'Bearer ' + token,
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(requestBody)
                    });

                    const responseData = await response.json();

                    if (response.ok) {
                        withdrawAmount.value = '';
                        window.location.href = '/home';
                        alert(responseData.message);
                    } else {
                        alert(responseData.error.message);
                    }
                } catch (error) {
                    console.error('Withdraw error:', error.message);
                    alert('An unexpected error occurred. Please try again later.');
                }
            }

            async function logout() {
                try {
                    const response = await fetch('/api/loogut', {
                        method: 'POST',
                        headers: {
                            'Authorization': 'Bearer ' + token,
                        }
                    });

                    const responseData = await response.json();

                    if (response.ok) {
                        sessionStorage.clear();
                        localStorage.clear();
                        window.location.href = '/login';
                        alert(responseData.message);
                    } else {
                        alert(responseData.error.message);
                    }
                } catch (error) {
                    console.error('Logout error:', error.message);
                    alert('An unexpected error occurred. Please try again later.');
                }
            }
        </script>
    `
}) %>